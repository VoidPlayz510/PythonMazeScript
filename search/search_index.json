{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Pymaze Documentation By N.M. How to install Pyamaze? pip install Pyamaze Extra content Further Pyamaze documentation and content is held at: https://pypi.org/project/pyamaze/ https://github.com/MAN1986/pyamaze https://www.youtube.com/watch?v=sTRK9mQgYuc&ab_channel=LearningOrbis Doco details This documentation will explore examples of the Pyamaze addon for Python and will explain how I've set it up for my project. Covered How to setup a Pyamaze maze WallFollowing algorithm (WF) Loading a pre-made map for a maze Saving a map for a maze Extra content","title":"Home"},{"location":"index.html#pymaze-documentation","text":"","title":"Pymaze Documentation"},{"location":"index.html#by-nm","text":"How to install Pyamaze? pip install Pyamaze","title":"By N.M."},{"location":"index.html#extra-content","text":"Further Pyamaze documentation and content is held at: https://pypi.org/project/pyamaze/ https://github.com/MAN1986/pyamaze https://www.youtube.com/watch?v=sTRK9mQgYuc&ab_channel=LearningOrbis","title":"Extra content"},{"location":"index.html#doco-details","text":"This documentation will explore examples of the Pyamaze addon for Python and will explain how I've set it up for my project.","title":"Doco details"},{"location":"index.html#covered","text":"How to setup a Pyamaze maze WallFollowing algorithm (WF) Loading a pre-made map for a maze Saving a map for a maze Extra content","title":"Covered"},{"location":"about.html","text":"About Section What is Pyamaze? Pyamaze is 'a module to generate Mazes and Navigate the path.' Who created Pyamaze? Pyamaze was creating by Muhammad Ahsan Naeem on GitHub on Oct 7, 2021 Documentation This documentation has been created by Nathaniel Mayers to demonstrate use of the Pyamaze module and to highlight its features.","title":"About"},{"location":"about.html#about-section","text":"What is Pyamaze? Pyamaze is 'a module to generate Mazes and Navigate the path.' Who created Pyamaze? Pyamaze was creating by Muhammad Ahsan Naeem on GitHub on Oct 7, 2021 Documentation This documentation has been created by Nathaniel Mayers to demonstrate use of the Pyamaze module and to highlight its features.","title":"About Section"},{"location":"algorithmWF.html","text":"Maze Setup Wall Followin Algorithm In a new python file add the following: def RCW(): global dire k = list(dire.keys()) v = list(dire.values()) v_rotated = [v[-1]] + v[:-1] dire = dict(zip(k, v_rotated)) def RCCW(): global dire k = list(dire.keys()) v = list(dire.values()) v_rotated = v[1:] + [v[0]] dire = dict(zip(k, v_rotated)) Once the variables are setup, let's start mapping the route and positions def moveForward(cell): if dire['forward'] == 'E': return (cell[0], cell[1] + 1), 'E' if dire['forward'] == 'W': return (cell[0], cell[1] - 1), 'W' if dire['forward'] == 'N': return (cell[0]-1, cell[1]), 'N' if dire['forward'] == 'S': return (cell[0]+1, cell[1]), 'S' The code below will give the agent a set of directions to follow and will stick to the left side of the walls to reach the goal which is position (1, 1) def wallMover(m): global dire dire = {'forward': 'N', 'left': 'W', 'back': 'S', 'right': 'E'} currCell = (m.rows, m.cols) path = '' while True: if currCell == (1, 1): break if m.maze_map[currCell][dire['left']] == 0: if m.maze_map[currCell][dire['forward']] == 0: RCW() else: currCell, d = moveForward(currCell) path += d else: RCCW() currCell, d = moveForward(currCell) path += d return path below the line if __name__ == '__main__': Insert the following code to create the maze and agent(s) Maze = maze(20, 20) Maze.CreateMaze(loopPercent=50) a = agent(Maze, footprints=True) path = wallMover(Maze) Maze.tracePath({a: path}) Maze.run() print(Maze.maze_map) Loading Maps Adding the following modifications will allow you to run a map made in the editor or to load a premade map from a csv file. if __name__ == '__main__': print(\"x\") loadMaze = False from pyamaze import maze, agent if loadMaze: Maze = maze(20, 20) Maze.CreateMaze(loadMaze='maze.csv', loopPercent=50) a = agent(Maze, footprints=True) path = wallMover(Maze) Maze.tracePath({a: path}) Maze.run() print(Maze.maze_map) else: Maze = maze(20, 20) Maze.CreateMaze(loopPercent=50) a = agent(Maze, footprints=True) path = wallMover(Maze) Maze.tracePath({a: path}) Maze.run() print(Maze.maze_map) Output Below is different examples of a successfully traveresed maze Example A Example B NOTE: Left hand corner the A.I. traverses into a blind passage and then reverses back out again, leaving what appears to be a cross in its position, as the A.I. goes in and out of the blind passage. Mapping of data structure Below is a dictionary of the maze mappings CSV: cell ,E,W,N,S \"(1, 1)\",1,0,0,0 \"(2, 1)\",1,0,0,1 \"(3, 1)\",1,0,1,0 \"(4, 1)\",1,0,0,0 \"(5, 1)\",1,0,0,1 \"(6, 1)\",1,0,1,1 \"(7, 1)\",0,0,1,1 \"(8, 1)\",0,0,1,1 \"(9, 1)\",1,0,1,0 \"(10, 1)\",1,0,0,0 \"(11, 1)\",1,0,0,1 \"(12, 1)\",0,0,1,1 \"(13, 1)\",1,0,1,0 \"(14, 1)\",1,0,0,1 \"(15, 1)\",0,0,1,1 \"(16, 1)\",0,0,1,1 \"(17, 1)\",1,0,1,1 \"(18, 1)\",0,0,1,1 \"(19, 1)\",0,0,1,1 \"(20, 1)\",0,0,1,0 \"(1, 2)\",1,1,0,0 \"(2, 2)\",1,1,0,0 \"(3, 2)\",1,1,0,0 \"(4, 2)\",0,1,0,1 \"(5, 2)\",0,1,1,0 \"(6, 2)\",1,1,0,0 \"(7, 2)\",1,0,0,1 \"(8, 2)\",1,0,1,0 \"(9, 2)\",0,1,0,1 \"(10, 2)\",0,1,1,0 \"(11, 2)\",1,1,0,0 \"(12, 2)\",1,0,0,0 \"(13, 2)\",1,1,0,0 \"(14, 2)\",0,1,0,1 \"(15, 2)\",1,0,1,0 \"(16, 2)\",1,0,0,0 \"(17, 2)\",1,1,0,0 \"(18, 2)\",1,0,0,1 \"(19, 2)\",0,0,1,1 \"(20, 2)\",1,0,1,0 \"(1, 3)\",0,1,0,1 \"(2, 3)\",0,1,1,0 \"(3, 3)\",1,1,0,0 \"(4, 3)\",1,0,0,1 \"(5, 3)\",0,0,1,1 \"(6, 3)\",1,1,1,0 \"(7, 3)\",1,1,0,0 \"(8, 3)\",0,1,0,1 \"(9, 3)\",0,0,1,1 \"(10, 3)\",0,0,1,1 \"(11, 3)\",0,1,1,0 \"(12, 3)\",1,1,0,0 \"(13, 3)\",0,1,0,1 \"(14, 3)\",0,0,1,1 \"(15, 3)\",0,1,1,0 \"(16, 3)\",1,1,0,0 \"(17, 3)\",1,1,0,0 \"(18, 3)\",0,1,0,1 \"(19, 3)\",1,0,1,0 \"(20, 3)\",1,1,0,0 \"(1, 4)\",1,0,0,1 \"(2, 4)\",0,0,1,1 \"(3, 4)\",0,1,1,0 \"(4, 4)\",1,1,0,0 \"(5, 4)\",0,0,0,1 \"(6, 4)\",0,1,1,0 \"(7, 4)\",0,1,0,1 \"(8, 4)\",1,0,1,0 \"(9, 4)\",0,0,0,1 \"(10, 4)\",1,0,1,1 \"(11, 4)\",0,0,1,1 \"(12, 4)\",0,1,1,1 \"(13, 4)\",0,0,1,1 \"(14, 4)\",0,0,1,1 \"(15, 4)\",0,0,1,1 \"(16, 4)\",1,1,1,0 \"(17, 4)\",1,1,0,0 \"(18, 4)\",1,0,0,1 \"(19, 4)\",0,1,1,0 \"(20, 4)\",1,1,0,0 \"(1, 5)\",1,1,0,0 \"(2, 5)\",0,0,0,1 \"(3, 5)\",1,0,1,1 \"(4, 5)\",0,1,1,1 \"(5, 5)\",0,0,1,1 \"(6, 5)\",0,0,1,1 \"(7, 5)\",0,0,1,1 \"(8, 5)\",0,1,1,1 \"(9, 5)\",1,0,1,0 \"(10, 5)\",0,1,0,0 \"(11, 5)\",1,0,0,1 \"(12, 5)\",1,0,1,0 \"(13, 5)\",1,0,0,1 \"(14, 5)\",1,0,1,1 \"(15, 5)\",0,0,1,1 \"(16, 5)\",0,1,1,0 \"(17, 5)\",1,1,0,1 \"(18, 5)\",0,1,1,1 \"(19, 5)\",0,0,1,0 \"(20, 5)\",1,1,0,0 \"(1, 6)\",0,1,0,1 \"(2, 6)\",1,0,1,0 \"(3, 6)\",1,1,0,0 \"(4, 6)\",1,0,0,1 \"(5, 6)\",1,0,1,0 \"(6, 6)\",1,0,0,0 \"(7, 6)\",1,0,0,1 \"(8, 6)\",1,0,1,0 \"(9, 6)\",0,1,0,1 \"(10, 6)\",1,0,1,0 \"(11, 6)\",1,1,0,0 \"(12, 6)\",0,1,0,1 \"(13, 6)\",0,1,1,0 \"(14, 6)\",1,1,0,0 \"(15, 6)\",1,0,0,1 \"(16, 6)\",1,0,1,0 \"(17, 6)\",1,1,0,0 \"(18, 6)\",1,0,0,1 \"(19, 6)\",0,0,1,1 \"(20, 6)\",1,1,1,0 \"(1, 7)\",1,0,0,0 \"(2, 7)\",1,1,0,0 \"(3, 7)\",0,1,0,1 \"(4, 7)\",0,1,1,0 \"(5, 7)\",1,1,0,1 \"(6, 7)\",0,1,1,0 \"(7, 7)\",1,1,0,0 \"(8, 7)\",0,1,0,1 \"(9, 7)\",1,0,1,0 \"(10, 7)\",1,1,0,0 \"(11, 7)\",1,1,0,0 \"(12, 7)\",0,0,0,1 \"(13, 7)\",0,0,1,1 \"(14, 7)\",0,1,1,0 \"(15, 7)\",1,1,0,0 \"(16, 7)\",1,1,0,0 \"(17, 7)\",1,1,0,0 \"(18, 7)\",1,1,0,0 \"(19, 7)\",1,0,0,1 \"(20, 7)\",0,1,1,0 \"(1, 8)\",1,1,0,0 \"(2, 8)\",0,1,0,1 \"(3, 8)\",1,0,1,0 \"(4, 8)\",1,0,0,1 \"(5, 8)\",0,1,1,0 \"(6, 8)\",1,0,0,1 \"(7, 8)\",0,1,1,0 \"(8, 8)\",1,0,0,0 \"(9, 8)\",1,1,0,0 \"(10, 8)\",1,1,0,0 \"(11, 8)\",0,1,0,1 \"(12, 8)\",1,0,1,0 \"(13, 8)\",1,0,0,1 \"(14, 8)\",0,0,1,1 \"(15, 8)\",0,1,1,0 \"(16, 8)\",1,1,0,0 \"(17, 8)\",0,1,0,0 \"(18, 8)\",1,1,0,0 \"(19, 8)\",0,1,0,1 \"(20, 8)\",1,0,1,0 \"(1, 9)\",1,1,0,0 \"(2, 9)\",1,0,0,1 \"(3, 9)\",0,1,1,0 \"(4, 9)\",1,1,0,0 \"(5, 9)\",1,0,0,1 \"(6, 9)\",0,1,1,0 \"(7, 9)\",1,0,0,0 \"(8, 9)\",1,1,0,1 \"(9, 9)\",0,1,1,0 \"(10, 9)\",0,1,0,1 \"(11, 9)\",0,0,1,1 \"(12, 9)\",1,1,1,0 \"(13, 9)\",1,1,0,0 \"(14, 9)\",0,0,0,1 \"(15, 9)\",0,0,1,1 \"(16, 9)\",0,1,1,1 \"(17, 9)\",0,0,1,1 \"(18, 9)\",0,1,1,0 \"(19, 9)\",0,0,0,1 \"(20, 9)\",1,1,1,0 \"(1, 10)\",1,1,0,1 \"(2, 10)\",0,1,1,0 \"(3, 10)\",1,0,0,1 \"(4, 10)\",0,1,1,0 \"(5, 10)\",0,1,0,1 \"(6, 10)\",1,0,1,0 \"(7, 10)\",0,1,0,1 \"(8, 10)\",0,1,1,1 \"(9, 10)\",0,0,1,1 \"(10, 10)\",0,0,1,1 \"(11, 10)\",1,0,1,0 \"(12, 10)\",0,1,0,0 \"(13, 10)\",0,1,0,1 \"(14, 10)\",0,0,1,1 \"(15, 10)\",1,0,1,1 \"(16, 10)\",0,0,1,1 \"(17, 10)\",1,0,1,0 \"(18, 10)\",1,0,0,1 \"(19, 10)\",1,0,1,0 \"(20, 10)\",1,1,0,0 \"(1, 11)\",0,1,0,1 \"(2, 11)\",1,0,1,0 \"(3, 11)\",0,1,0,1 \"(4, 11)\",0,0,1,1 \"(5, 11)\",1,0,1,0 \"(6, 11)\",0,1,0,1 \"(7, 11)\",1,0,1,0 \"(8, 11)\",1,0,0,1 \"(9, 11)\",0,0,1,1 \"(10, 11)\",1,0,1,0 \"(11, 11)\",0,1,0,1 \"(12, 11)\",0,0,1,1 \"(13, 11)\",0,0,1,1 \"(14, 11)\",1,0,1,0 \"(15, 11)\",0,1,0,1 \"(16, 11)\",0,0,1,0 \"(17, 11)\",1,1,0,1 \"(18, 11)\",0,1,1,0 \"(19, 11)\",1,1,0,0 \"(20, 11)\",1,1,0,0 \"(1, 12)\",1,0,0,0 \"(2, 12)\",0,1,0,1 \"(3, 12)\",1,0,1,0 \"(4, 12)\",1,0,0,0 \"(5, 12)\",1,1,0,0 \"(6, 12)\",1,0,0,0 \"(7, 12)\",1,1,0,0 \"(8, 12)\",0,1,0,0 \"(9, 12)\",1,0,0,1 \"(10, 12)\",0,1,1,1 \"(11, 12)\",1,0,1,0 \"(12, 12)\",1,0,0,1 \"(13, 12)\",1,0,1,0 \"(14, 12)\",0,1,0,1 \"(15, 12)\",0,0,1,1 \"(16, 12)\",1,0,1,0 \"(17, 12)\",0,1,0,0 \"(18, 12)\",1,0,0,1 \"(19, 12)\",0,1,1,0 \"(20, 12)\",1,1,0,0 \"(1, 13)\",1,1,0,1 \"(2, 13)\",0,0,1,1 \"(3, 13)\",0,1,1,0 \"(4, 13)\",1,1,0,1 \"(5, 13)\",0,1,1,1 \"(6, 13)\",0,1,1,0 \"(7, 13)\",0,1,0,1 \"(8, 13)\",1,0,1,0 \"(9, 13)\",1,1,0,0 \"(10, 13)\",0,0,0,1 \"(11, 13)\",1,1,1,0 \"(12, 13)\",0,1,0,0 \"(13, 13)\",1,1,0,1 \"(14, 13)\",1,0,1,0 \"(15, 13)\",1,0,0,1 \"(16, 13)\",0,1,1,0 \"(17, 13)\",1,0,0,1 \"(18, 13)\",0,1,1,0 \"(19, 13)\",1,0,0,1 \"(20, 13)\",0,1,1,0 \"(1, 14)\",0,1,0,1 \"(2, 14)\",1,0,1,0 \"(3, 14)\",1,0,0,1 \"(4, 14)\",0,1,1,0 \"(5, 14)\",1,0,0,1 \"(6, 14)\",1,0,1,1 \"(7, 14)\",0,0,1,0 \"(8, 14)\",1,1,0,0 \"(9, 14)\",1,1,0,1 \"(10, 14)\",1,0,1,0 \"(11, 14)\",0,1,0,1 \"(12, 14)\",1,0,1,0 \"(13, 14)\",1,1,0,0 \"(14, 14)\",1,1,0,0 \"(15, 14)\",0,1,0,1 \"(16, 14)\",0,0,1,1 \"(17, 14)\",0,1,1,0 \"(18, 14)\",1,0,0,0 \"(19, 14)\",0,1,0,1 \"(20, 14)\",1,0,1,0 \"(1, 15)\",1,0,0,1 \"(2, 15)\",0,1,1,0 \"(3, 15)\",0,1,0,1 \"(4, 15)\",1,0,1,0 \"(5, 15)\",0,1,0,0 \"(6, 15)\",1,1,0,0 \"(7, 15)\",1,0,0,1 \"(8, 15)\",0,1,1,0 \"(9, 15)\",0,1,0,0 \"(10, 15)\",0,1,0,1 \"(11, 15)\",1,0,1,0 \"(12, 15)\",1,1,0,0 \"(13, 15)\",1,1,0,0 \"(14, 15)\",0,1,0,1 \"(15, 15)\",0,0,1,1 \"(16, 15)\",0,0,1,1 \"(17, 15)\",0,0,1,1 \"(18, 15)\",1,1,1,0 \"(19, 15)\",1,0,0,0 \"(20, 15)\",1,1,0,0 \"(1, 16)\",1,1,0,0 \"(2, 16)\",0,0,0,1 \"(3, 16)\",0,0,1,1 \"(4, 16)\",0,1,1,1 \"(5, 16)\",1,0,1,0 \"(6, 16)\",1,1,0,0 \"(7, 16)\",0,1,0,1 \"(8, 16)\",0,0,1,1 \"(9, 16)\",1,0,1,0 \"(10, 16)\",1,0,0,1 \"(11, 16)\",1,1,1,0 \"(12, 16)\",0,1,0,1 \"(13, 16)\",0,1,1,0 \"(14, 16)\",0,0,0,1 \"(15, 16)\",0,0,1,1 \"(16, 16)\",0,0,1,1 \"(17, 16)\",1,0,1,0 \"(18, 16)\",1,1,0,1 \"(19, 16)\",0,1,1,0 \"(20, 16)\",1,1,0,0 \"(1, 17)\",0,1,0,1 \"(2, 17)\",0,0,1,1 \"(3, 17)\",0,0,1,1 \"(4, 17)\",1,0,1,0 \"(5, 17)\",1,1,0,0 \"(6, 17)\",1,1,0,1 \"(7, 17)\",1,0,1,1 \"(8, 17)\",0,0,1,0 \"(9, 17)\",1,1,0,0 \"(10, 17)\",1,1,0,0 \"(11, 17)\",0,1,0,0 \"(12, 17)\",1,0,0,1 \"(13, 17)\",1,0,1,0 \"(14, 17)\",1,0,0,1 \"(15, 17)\",0,0,1,1 \"(16, 17)\",1,0,1,0 \"(17, 17)\",0,1,0,1 \"(18, 17)\",1,1,1,0 \"(19, 17)\",1,0,0,1 \"(20, 17)\",0,1,1,0 \"(1, 18)\",1,0,0,1 \"(2, 18)\",0,0,1,1 \"(3, 18)\",0,0,1,1 \"(4, 18)\",0,1,1,0 \"(5, 18)\",0,1,0,1 \"(6, 18)\",0,1,1,0 \"(7, 18)\",0,1,0,0 \"(8, 18)\",1,0,0,1 \"(9, 18)\",0,1,1,0 \"(10, 18)\",1,1,0,1 \"(11, 18)\",0,0,1,1 \"(12, 18)\",0,1,1,0 \"(13, 18)\",1,1,0,0 \"(14, 18)\",1,1,0,0 \"(15, 18)\",1,0,0,0 \"(16, 18)\",0,1,0,1 \"(17, 18)\",1,0,1,0 \"(18, 18)\",1,1,0,0 \"(19, 18)\",1,1,0,0 \"(20, 18)\",1,0,0,0 \"(1, 19)\",1,1,0,0 \"(2, 19)\",1,0,0,1 \"(3, 19)\",1,0,1,0 \"(4, 19)\",0,0,0,1 \"(5, 19)\",1,0,1,1 \"(6, 19)\",1,0,1,0 \"(7, 19)\",1,0,0,1 \"(8, 19)\",0,1,1,0 \"(9, 19)\",1,0,0,0 \"(10, 19)\",1,1,0,0 \"(11, 19)\",1,0,0,0 \"(12, 19)\",1,0,0,1 \"(13, 19)\",0,1,1,0 \"(14, 19)\",1,1,0,0 \"(15, 19)\",1,1,0,0 \"(16, 19)\",1,0,0,1 \"(17, 19)\",0,1,1,0 \"(18, 19)\",0,1,0,0 \"(19, 19)\",1,1,0,0 \"(20, 19)\",1,1,0,0 \"(1, 20)\",0,1,0,1 \"(2, 20)\",0,1,1,0 \"(3, 20)\",0,1,0,1 \"(4, 20)\",0,0,1,1 \"(5, 20)\",0,1,1,0 \"(6, 20)\",0,1,0,1 \"(7, 20)\",0,1,1,0 \"(8, 20)\",0,0,0,1 \"(9, 20)\",0,1,1,1 \"(10, 20)\",0,1,1,1 \"(11, 20)\",0,1,1,0 \"(12, 20)\",0,1,0,1 \"(13, 20)\",0,0,1,1 \"(14, 20)\",0,1,1,1 \"(15, 20)\",0,1,1,0 \"(16, 20)\",0,1,0,1 \"(17, 20)\",0,0,1,1 \"(18, 20)\",0,0,1,1 \"(19, 20)\",0,1,1,1 \"(20, 20)\",0,1,1,0 DICT {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (3, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (4, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (7, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (9, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (10, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (11, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (12, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (13, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (14, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (15, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (16, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (17, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (19, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (20, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (4, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (5, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (7, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (9, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (11, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (12, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (13, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (14, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (15, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (17, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (18, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (19, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (1, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (3, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (4, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (7, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (9, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (11, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (12, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (14, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (15, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (16, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (17, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (18, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (19, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (20, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (3, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (5, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (7, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (9, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (11, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (12, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (15, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (16, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (17, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (18, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (19, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (20, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (5, 5): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (6, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (7, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (9, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (11, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (14, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (15, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (16, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (17, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (18, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (19, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (3, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (5, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (7, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (9, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (11, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (13, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (14, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (15, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (16, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (17, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (18, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (19, 6): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (20, 6): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (4, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (5, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 7): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (7, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (8, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (9, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (10, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (11, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 7): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (13, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (14, 7): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (15, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (16, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (17, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (18, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (19, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (3, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (7, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (10, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (11, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (12, 8): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (13, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (15, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (17, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (18, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (19, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (20, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (3, 9): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 9): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (7, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (10, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (11, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (12, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (14, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (15, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (16, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (17, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (18, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (19, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (20, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (5, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (7, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (11, 10): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (12, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (13, 10): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (14, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (15, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (16, 10): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (17, 10): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (18, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (19, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (20, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (1, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (3, 11): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (7, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (9, 11): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (11, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (13, 11): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (14, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (15, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (17, 11): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (18, 11): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (19, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (20, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 12): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (3, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (7, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (9, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (11, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (13, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 12): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (15, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (17, 12): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (18, 12): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (19, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 13): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (3, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 13): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (6, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (7, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 13): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (9, 13): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (10, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (11, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (12, 13): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (13, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (14, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (15, 13): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (16, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (17, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 13): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (19, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (6, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (7, 14): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (9, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (11, 14): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 14): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (13, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (14, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (15, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (16, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (17, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (18, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (19, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (20, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 15): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (3, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (5, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 15): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (7, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (9, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (10, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (11, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (12, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (13, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (14, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (15, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (17, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (18, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (19, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (20, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (3, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 16): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (7, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (8, 16): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (9, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (10, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (11, 16): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (13, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (14, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (15, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (17, 16): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (19, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (20, 16): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (3, 17): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (4, 17): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (5, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (7, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (8, 17): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 17): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (10, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (11, 17): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (13, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (14, 17): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (15, 17): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (16, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (17, 17): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 17): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (19, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 18): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (4, 18): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (6, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (7, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (8, 18): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (9, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (10, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (11, 18): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (13, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 18): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (15, 18): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (16, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (17, 18): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (18, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (19, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (20, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 19): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (3, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 19): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (5, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 19): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (7, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (9, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 19): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (11, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 19): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (13, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 19): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (15, 19): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (16, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (17, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (18, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (19, 19): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (4, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (7, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (9, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (11, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (13, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 20): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (15, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (16, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (17, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (18, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (19, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (20, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}","title":"WF"},{"location":"algorithmWF.html#maze-setup","text":"","title":"Maze Setup"},{"location":"algorithmWF.html#wall-followin-algorithm","text":"In a new python file add the following: def RCW(): global dire k = list(dire.keys()) v = list(dire.values()) v_rotated = [v[-1]] + v[:-1] dire = dict(zip(k, v_rotated)) def RCCW(): global dire k = list(dire.keys()) v = list(dire.values()) v_rotated = v[1:] + [v[0]] dire = dict(zip(k, v_rotated)) Once the variables are setup, let's start mapping the route and positions def moveForward(cell): if dire['forward'] == 'E': return (cell[0], cell[1] + 1), 'E' if dire['forward'] == 'W': return (cell[0], cell[1] - 1), 'W' if dire['forward'] == 'N': return (cell[0]-1, cell[1]), 'N' if dire['forward'] == 'S': return (cell[0]+1, cell[1]), 'S' The code below will give the agent a set of directions to follow and will stick to the left side of the walls to reach the goal which is position (1, 1) def wallMover(m): global dire dire = {'forward': 'N', 'left': 'W', 'back': 'S', 'right': 'E'} currCell = (m.rows, m.cols) path = '' while True: if currCell == (1, 1): break if m.maze_map[currCell][dire['left']] == 0: if m.maze_map[currCell][dire['forward']] == 0: RCW() else: currCell, d = moveForward(currCell) path += d else: RCCW() currCell, d = moveForward(currCell) path += d return path below the line if __name__ == '__main__': Insert the following code to create the maze and agent(s) Maze = maze(20, 20) Maze.CreateMaze(loopPercent=50) a = agent(Maze, footprints=True) path = wallMover(Maze) Maze.tracePath({a: path}) Maze.run() print(Maze.maze_map)","title":"Wall Followin Algorithm"},{"location":"algorithmWF.html#loading-maps","text":"Adding the following modifications will allow you to run a map made in the editor or to load a premade map from a csv file. if __name__ == '__main__': print(\"x\") loadMaze = False from pyamaze import maze, agent if loadMaze: Maze = maze(20, 20) Maze.CreateMaze(loadMaze='maze.csv', loopPercent=50) a = agent(Maze, footprints=True) path = wallMover(Maze) Maze.tracePath({a: path}) Maze.run() print(Maze.maze_map) else: Maze = maze(20, 20) Maze.CreateMaze(loopPercent=50) a = agent(Maze, footprints=True) path = wallMover(Maze) Maze.tracePath({a: path}) Maze.run() print(Maze.maze_map)","title":"Loading Maps"},{"location":"algorithmWF.html#output","text":"Below is different examples of a successfully traveresed maze Example A Example B NOTE: Left hand corner the A.I. traverses into a blind passage and then reverses back out again, leaving what appears to be a cross in its position, as the A.I. goes in and out of the blind passage.","title":"Output"},{"location":"algorithmWF.html#mapping-of-data-structure","text":"Below is a dictionary of the maze mappings CSV: cell ,E,W,N,S \"(1, 1)\",1,0,0,0 \"(2, 1)\",1,0,0,1 \"(3, 1)\",1,0,1,0 \"(4, 1)\",1,0,0,0 \"(5, 1)\",1,0,0,1 \"(6, 1)\",1,0,1,1 \"(7, 1)\",0,0,1,1 \"(8, 1)\",0,0,1,1 \"(9, 1)\",1,0,1,0 \"(10, 1)\",1,0,0,0 \"(11, 1)\",1,0,0,1 \"(12, 1)\",0,0,1,1 \"(13, 1)\",1,0,1,0 \"(14, 1)\",1,0,0,1 \"(15, 1)\",0,0,1,1 \"(16, 1)\",0,0,1,1 \"(17, 1)\",1,0,1,1 \"(18, 1)\",0,0,1,1 \"(19, 1)\",0,0,1,1 \"(20, 1)\",0,0,1,0 \"(1, 2)\",1,1,0,0 \"(2, 2)\",1,1,0,0 \"(3, 2)\",1,1,0,0 \"(4, 2)\",0,1,0,1 \"(5, 2)\",0,1,1,0 \"(6, 2)\",1,1,0,0 \"(7, 2)\",1,0,0,1 \"(8, 2)\",1,0,1,0 \"(9, 2)\",0,1,0,1 \"(10, 2)\",0,1,1,0 \"(11, 2)\",1,1,0,0 \"(12, 2)\",1,0,0,0 \"(13, 2)\",1,1,0,0 \"(14, 2)\",0,1,0,1 \"(15, 2)\",1,0,1,0 \"(16, 2)\",1,0,0,0 \"(17, 2)\",1,1,0,0 \"(18, 2)\",1,0,0,1 \"(19, 2)\",0,0,1,1 \"(20, 2)\",1,0,1,0 \"(1, 3)\",0,1,0,1 \"(2, 3)\",0,1,1,0 \"(3, 3)\",1,1,0,0 \"(4, 3)\",1,0,0,1 \"(5, 3)\",0,0,1,1 \"(6, 3)\",1,1,1,0 \"(7, 3)\",1,1,0,0 \"(8, 3)\",0,1,0,1 \"(9, 3)\",0,0,1,1 \"(10, 3)\",0,0,1,1 \"(11, 3)\",0,1,1,0 \"(12, 3)\",1,1,0,0 \"(13, 3)\",0,1,0,1 \"(14, 3)\",0,0,1,1 \"(15, 3)\",0,1,1,0 \"(16, 3)\",1,1,0,0 \"(17, 3)\",1,1,0,0 \"(18, 3)\",0,1,0,1 \"(19, 3)\",1,0,1,0 \"(20, 3)\",1,1,0,0 \"(1, 4)\",1,0,0,1 \"(2, 4)\",0,0,1,1 \"(3, 4)\",0,1,1,0 \"(4, 4)\",1,1,0,0 \"(5, 4)\",0,0,0,1 \"(6, 4)\",0,1,1,0 \"(7, 4)\",0,1,0,1 \"(8, 4)\",1,0,1,0 \"(9, 4)\",0,0,0,1 \"(10, 4)\",1,0,1,1 \"(11, 4)\",0,0,1,1 \"(12, 4)\",0,1,1,1 \"(13, 4)\",0,0,1,1 \"(14, 4)\",0,0,1,1 \"(15, 4)\",0,0,1,1 \"(16, 4)\",1,1,1,0 \"(17, 4)\",1,1,0,0 \"(18, 4)\",1,0,0,1 \"(19, 4)\",0,1,1,0 \"(20, 4)\",1,1,0,0 \"(1, 5)\",1,1,0,0 \"(2, 5)\",0,0,0,1 \"(3, 5)\",1,0,1,1 \"(4, 5)\",0,1,1,1 \"(5, 5)\",0,0,1,1 \"(6, 5)\",0,0,1,1 \"(7, 5)\",0,0,1,1 \"(8, 5)\",0,1,1,1 \"(9, 5)\",1,0,1,0 \"(10, 5)\",0,1,0,0 \"(11, 5)\",1,0,0,1 \"(12, 5)\",1,0,1,0 \"(13, 5)\",1,0,0,1 \"(14, 5)\",1,0,1,1 \"(15, 5)\",0,0,1,1 \"(16, 5)\",0,1,1,0 \"(17, 5)\",1,1,0,1 \"(18, 5)\",0,1,1,1 \"(19, 5)\",0,0,1,0 \"(20, 5)\",1,1,0,0 \"(1, 6)\",0,1,0,1 \"(2, 6)\",1,0,1,0 \"(3, 6)\",1,1,0,0 \"(4, 6)\",1,0,0,1 \"(5, 6)\",1,0,1,0 \"(6, 6)\",1,0,0,0 \"(7, 6)\",1,0,0,1 \"(8, 6)\",1,0,1,0 \"(9, 6)\",0,1,0,1 \"(10, 6)\",1,0,1,0 \"(11, 6)\",1,1,0,0 \"(12, 6)\",0,1,0,1 \"(13, 6)\",0,1,1,0 \"(14, 6)\",1,1,0,0 \"(15, 6)\",1,0,0,1 \"(16, 6)\",1,0,1,0 \"(17, 6)\",1,1,0,0 \"(18, 6)\",1,0,0,1 \"(19, 6)\",0,0,1,1 \"(20, 6)\",1,1,1,0 \"(1, 7)\",1,0,0,0 \"(2, 7)\",1,1,0,0 \"(3, 7)\",0,1,0,1 \"(4, 7)\",0,1,1,0 \"(5, 7)\",1,1,0,1 \"(6, 7)\",0,1,1,0 \"(7, 7)\",1,1,0,0 \"(8, 7)\",0,1,0,1 \"(9, 7)\",1,0,1,0 \"(10, 7)\",1,1,0,0 \"(11, 7)\",1,1,0,0 \"(12, 7)\",0,0,0,1 \"(13, 7)\",0,0,1,1 \"(14, 7)\",0,1,1,0 \"(15, 7)\",1,1,0,0 \"(16, 7)\",1,1,0,0 \"(17, 7)\",1,1,0,0 \"(18, 7)\",1,1,0,0 \"(19, 7)\",1,0,0,1 \"(20, 7)\",0,1,1,0 \"(1, 8)\",1,1,0,0 \"(2, 8)\",0,1,0,1 \"(3, 8)\",1,0,1,0 \"(4, 8)\",1,0,0,1 \"(5, 8)\",0,1,1,0 \"(6, 8)\",1,0,0,1 \"(7, 8)\",0,1,1,0 \"(8, 8)\",1,0,0,0 \"(9, 8)\",1,1,0,0 \"(10, 8)\",1,1,0,0 \"(11, 8)\",0,1,0,1 \"(12, 8)\",1,0,1,0 \"(13, 8)\",1,0,0,1 \"(14, 8)\",0,0,1,1 \"(15, 8)\",0,1,1,0 \"(16, 8)\",1,1,0,0 \"(17, 8)\",0,1,0,0 \"(18, 8)\",1,1,0,0 \"(19, 8)\",0,1,0,1 \"(20, 8)\",1,0,1,0 \"(1, 9)\",1,1,0,0 \"(2, 9)\",1,0,0,1 \"(3, 9)\",0,1,1,0 \"(4, 9)\",1,1,0,0 \"(5, 9)\",1,0,0,1 \"(6, 9)\",0,1,1,0 \"(7, 9)\",1,0,0,0 \"(8, 9)\",1,1,0,1 \"(9, 9)\",0,1,1,0 \"(10, 9)\",0,1,0,1 \"(11, 9)\",0,0,1,1 \"(12, 9)\",1,1,1,0 \"(13, 9)\",1,1,0,0 \"(14, 9)\",0,0,0,1 \"(15, 9)\",0,0,1,1 \"(16, 9)\",0,1,1,1 \"(17, 9)\",0,0,1,1 \"(18, 9)\",0,1,1,0 \"(19, 9)\",0,0,0,1 \"(20, 9)\",1,1,1,0 \"(1, 10)\",1,1,0,1 \"(2, 10)\",0,1,1,0 \"(3, 10)\",1,0,0,1 \"(4, 10)\",0,1,1,0 \"(5, 10)\",0,1,0,1 \"(6, 10)\",1,0,1,0 \"(7, 10)\",0,1,0,1 \"(8, 10)\",0,1,1,1 \"(9, 10)\",0,0,1,1 \"(10, 10)\",0,0,1,1 \"(11, 10)\",1,0,1,0 \"(12, 10)\",0,1,0,0 \"(13, 10)\",0,1,0,1 \"(14, 10)\",0,0,1,1 \"(15, 10)\",1,0,1,1 \"(16, 10)\",0,0,1,1 \"(17, 10)\",1,0,1,0 \"(18, 10)\",1,0,0,1 \"(19, 10)\",1,0,1,0 \"(20, 10)\",1,1,0,0 \"(1, 11)\",0,1,0,1 \"(2, 11)\",1,0,1,0 \"(3, 11)\",0,1,0,1 \"(4, 11)\",0,0,1,1 \"(5, 11)\",1,0,1,0 \"(6, 11)\",0,1,0,1 \"(7, 11)\",1,0,1,0 \"(8, 11)\",1,0,0,1 \"(9, 11)\",0,0,1,1 \"(10, 11)\",1,0,1,0 \"(11, 11)\",0,1,0,1 \"(12, 11)\",0,0,1,1 \"(13, 11)\",0,0,1,1 \"(14, 11)\",1,0,1,0 \"(15, 11)\",0,1,0,1 \"(16, 11)\",0,0,1,0 \"(17, 11)\",1,1,0,1 \"(18, 11)\",0,1,1,0 \"(19, 11)\",1,1,0,0 \"(20, 11)\",1,1,0,0 \"(1, 12)\",1,0,0,0 \"(2, 12)\",0,1,0,1 \"(3, 12)\",1,0,1,0 \"(4, 12)\",1,0,0,0 \"(5, 12)\",1,1,0,0 \"(6, 12)\",1,0,0,0 \"(7, 12)\",1,1,0,0 \"(8, 12)\",0,1,0,0 \"(9, 12)\",1,0,0,1 \"(10, 12)\",0,1,1,1 \"(11, 12)\",1,0,1,0 \"(12, 12)\",1,0,0,1 \"(13, 12)\",1,0,1,0 \"(14, 12)\",0,1,0,1 \"(15, 12)\",0,0,1,1 \"(16, 12)\",1,0,1,0 \"(17, 12)\",0,1,0,0 \"(18, 12)\",1,0,0,1 \"(19, 12)\",0,1,1,0 \"(20, 12)\",1,1,0,0 \"(1, 13)\",1,1,0,1 \"(2, 13)\",0,0,1,1 \"(3, 13)\",0,1,1,0 \"(4, 13)\",1,1,0,1 \"(5, 13)\",0,1,1,1 \"(6, 13)\",0,1,1,0 \"(7, 13)\",0,1,0,1 \"(8, 13)\",1,0,1,0 \"(9, 13)\",1,1,0,0 \"(10, 13)\",0,0,0,1 \"(11, 13)\",1,1,1,0 \"(12, 13)\",0,1,0,0 \"(13, 13)\",1,1,0,1 \"(14, 13)\",1,0,1,0 \"(15, 13)\",1,0,0,1 \"(16, 13)\",0,1,1,0 \"(17, 13)\",1,0,0,1 \"(18, 13)\",0,1,1,0 \"(19, 13)\",1,0,0,1 \"(20, 13)\",0,1,1,0 \"(1, 14)\",0,1,0,1 \"(2, 14)\",1,0,1,0 \"(3, 14)\",1,0,0,1 \"(4, 14)\",0,1,1,0 \"(5, 14)\",1,0,0,1 \"(6, 14)\",1,0,1,1 \"(7, 14)\",0,0,1,0 \"(8, 14)\",1,1,0,0 \"(9, 14)\",1,1,0,1 \"(10, 14)\",1,0,1,0 \"(11, 14)\",0,1,0,1 \"(12, 14)\",1,0,1,0 \"(13, 14)\",1,1,0,0 \"(14, 14)\",1,1,0,0 \"(15, 14)\",0,1,0,1 \"(16, 14)\",0,0,1,1 \"(17, 14)\",0,1,1,0 \"(18, 14)\",1,0,0,0 \"(19, 14)\",0,1,0,1 \"(20, 14)\",1,0,1,0 \"(1, 15)\",1,0,0,1 \"(2, 15)\",0,1,1,0 \"(3, 15)\",0,1,0,1 \"(4, 15)\",1,0,1,0 \"(5, 15)\",0,1,0,0 \"(6, 15)\",1,1,0,0 \"(7, 15)\",1,0,0,1 \"(8, 15)\",0,1,1,0 \"(9, 15)\",0,1,0,0 \"(10, 15)\",0,1,0,1 \"(11, 15)\",1,0,1,0 \"(12, 15)\",1,1,0,0 \"(13, 15)\",1,1,0,0 \"(14, 15)\",0,1,0,1 \"(15, 15)\",0,0,1,1 \"(16, 15)\",0,0,1,1 \"(17, 15)\",0,0,1,1 \"(18, 15)\",1,1,1,0 \"(19, 15)\",1,0,0,0 \"(20, 15)\",1,1,0,0 \"(1, 16)\",1,1,0,0 \"(2, 16)\",0,0,0,1 \"(3, 16)\",0,0,1,1 \"(4, 16)\",0,1,1,1 \"(5, 16)\",1,0,1,0 \"(6, 16)\",1,1,0,0 \"(7, 16)\",0,1,0,1 \"(8, 16)\",0,0,1,1 \"(9, 16)\",1,0,1,0 \"(10, 16)\",1,0,0,1 \"(11, 16)\",1,1,1,0 \"(12, 16)\",0,1,0,1 \"(13, 16)\",0,1,1,0 \"(14, 16)\",0,0,0,1 \"(15, 16)\",0,0,1,1 \"(16, 16)\",0,0,1,1 \"(17, 16)\",1,0,1,0 \"(18, 16)\",1,1,0,1 \"(19, 16)\",0,1,1,0 \"(20, 16)\",1,1,0,0 \"(1, 17)\",0,1,0,1 \"(2, 17)\",0,0,1,1 \"(3, 17)\",0,0,1,1 \"(4, 17)\",1,0,1,0 \"(5, 17)\",1,1,0,0 \"(6, 17)\",1,1,0,1 \"(7, 17)\",1,0,1,1 \"(8, 17)\",0,0,1,0 \"(9, 17)\",1,1,0,0 \"(10, 17)\",1,1,0,0 \"(11, 17)\",0,1,0,0 \"(12, 17)\",1,0,0,1 \"(13, 17)\",1,0,1,0 \"(14, 17)\",1,0,0,1 \"(15, 17)\",0,0,1,1 \"(16, 17)\",1,0,1,0 \"(17, 17)\",0,1,0,1 \"(18, 17)\",1,1,1,0 \"(19, 17)\",1,0,0,1 \"(20, 17)\",0,1,1,0 \"(1, 18)\",1,0,0,1 \"(2, 18)\",0,0,1,1 \"(3, 18)\",0,0,1,1 \"(4, 18)\",0,1,1,0 \"(5, 18)\",0,1,0,1 \"(6, 18)\",0,1,1,0 \"(7, 18)\",0,1,0,0 \"(8, 18)\",1,0,0,1 \"(9, 18)\",0,1,1,0 \"(10, 18)\",1,1,0,1 \"(11, 18)\",0,0,1,1 \"(12, 18)\",0,1,1,0 \"(13, 18)\",1,1,0,0 \"(14, 18)\",1,1,0,0 \"(15, 18)\",1,0,0,0 \"(16, 18)\",0,1,0,1 \"(17, 18)\",1,0,1,0 \"(18, 18)\",1,1,0,0 \"(19, 18)\",1,1,0,0 \"(20, 18)\",1,0,0,0 \"(1, 19)\",1,1,0,0 \"(2, 19)\",1,0,0,1 \"(3, 19)\",1,0,1,0 \"(4, 19)\",0,0,0,1 \"(5, 19)\",1,0,1,1 \"(6, 19)\",1,0,1,0 \"(7, 19)\",1,0,0,1 \"(8, 19)\",0,1,1,0 \"(9, 19)\",1,0,0,0 \"(10, 19)\",1,1,0,0 \"(11, 19)\",1,0,0,0 \"(12, 19)\",1,0,0,1 \"(13, 19)\",0,1,1,0 \"(14, 19)\",1,1,0,0 \"(15, 19)\",1,1,0,0 \"(16, 19)\",1,0,0,1 \"(17, 19)\",0,1,1,0 \"(18, 19)\",0,1,0,0 \"(19, 19)\",1,1,0,0 \"(20, 19)\",1,1,0,0 \"(1, 20)\",0,1,0,1 \"(2, 20)\",0,1,1,0 \"(3, 20)\",0,1,0,1 \"(4, 20)\",0,0,1,1 \"(5, 20)\",0,1,1,0 \"(6, 20)\",0,1,0,1 \"(7, 20)\",0,1,1,0 \"(8, 20)\",0,0,0,1 \"(9, 20)\",0,1,1,1 \"(10, 20)\",0,1,1,1 \"(11, 20)\",0,1,1,0 \"(12, 20)\",0,1,0,1 \"(13, 20)\",0,0,1,1 \"(14, 20)\",0,1,1,1 \"(15, 20)\",0,1,1,0 \"(16, 20)\",0,1,0,1 \"(17, 20)\",0,0,1,1 \"(18, 20)\",0,0,1,1 \"(19, 20)\",0,1,1,1 \"(20, 20)\",0,1,1,0 DICT {(1, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (3, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (4, 1): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (7, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (9, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (10, 1): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (11, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (12, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (13, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (14, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (15, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (16, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (17, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 1): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (19, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (20, 1): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (4, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (5, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (7, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (9, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (11, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (12, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (13, 2): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (14, 2): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (15, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (17, 2): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (18, 2): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (19, 2): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 2): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (1, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (3, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (4, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (7, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 3): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (9, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (11, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (12, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (14, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (15, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (16, 3): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (17, 3): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (18, 3): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (19, 3): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (20, 3): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (3, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (5, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (7, 4): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (9, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (11, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (12, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 4): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (15, 4): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (16, 4): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (17, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (18, 4): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (19, 4): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (20, 4): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (5, 5): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (6, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (7, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (9, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (11, 5): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (14, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (15, 5): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (16, 5): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (17, 5): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (18, 5): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (19, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 5): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (3, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (5, 6): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 6): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (7, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (9, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (11, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (13, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (14, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (15, 6): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (16, 6): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (17, 6): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (18, 6): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (19, 6): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (20, 6): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (4, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (5, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 7): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (7, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (8, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (9, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (10, 7): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (11, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 7): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (13, 7): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (14, 7): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (15, 7): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (16, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (17, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (18, 7): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (19, 7): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 7): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (3, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (7, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 8): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (10, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (11, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (12, 8): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (13, 8): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (15, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 8): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (17, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (18, 8): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (19, 8): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (20, 8): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (3, 9): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 9): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (7, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (10, 9): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (11, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (12, 9): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (13, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (14, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (15, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (16, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (17, 9): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (18, 9): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (19, 9): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (20, 9): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 10): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (5, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (7, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (10, 10): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (11, 10): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (12, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (13, 10): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (14, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (15, 10): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (16, 10): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (17, 10): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (18, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (19, 10): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (20, 10): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (1, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (3, 11): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (7, 11): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (8, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (9, 11): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (11, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (13, 11): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (14, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (15, 11): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (17, 11): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (18, 11): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (19, 11): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (20, 11): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (1, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 12): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (3, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 12): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (7, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (8, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (9, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (11, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 12): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (13, 12): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 12): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (15, 12): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (17, 12): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (18, 12): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (19, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 12): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 13): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (3, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (4, 13): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 0}, (6, 13): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (7, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 13): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (9, 13): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (10, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (11, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (12, 13): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (13, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (14, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (15, 13): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (16, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (17, 13): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 13): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (19, 13): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 13): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 14): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (5, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (6, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (7, 14): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (8, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (9, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (10, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (11, 14): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 14): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (13, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (14, 14): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (15, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (16, 14): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (17, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (18, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (19, 14): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (20, 14): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 15): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (2, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (3, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (4, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (5, 15): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (6, 15): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (7, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (8, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (9, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (10, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (11, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (12, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (13, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (14, 15): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (15, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (16, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (17, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (18, 15): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (19, 15): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (20, 15): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (3, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (4, 16): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (6, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (7, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (8, 16): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (9, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (10, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (11, 16): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (13, 16): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (14, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (15, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (16, 16): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (17, 16): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (19, 16): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (20, 16): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (1, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (3, 17): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (4, 17): {'E': 0, 'W': 0, 'N': 1, 'S': 0}, (5, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (6, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (7, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (8, 17): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (9, 17): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (10, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (11, 17): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (13, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (14, 17): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (15, 17): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (16, 17): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (17, 17): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (18, 17): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (19, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (20, 17): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (2, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (3, 18): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (4, 18): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (5, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (6, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (7, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (8, 18): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (9, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (10, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (11, 18): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (12, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (13, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 18): {'E': 0, 'W': 1, 'N': 0, 'S': 0}, (15, 18): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (16, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 1}, (17, 18): {'E': 1, 'W': 0, 'N': 1, 'S': 1}, (18, 18): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (19, 18): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (20, 18): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (2, 19): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (3, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (4, 19): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (5, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 1}, (6, 19): {'E': 1, 'W': 0, 'N': 1, 'S': 0}, (7, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (8, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (9, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (10, 19): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (11, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (12, 19): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (13, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (14, 19): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (15, 19): {'E': 1, 'W': 1, 'N': 1, 'S': 0}, (16, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (17, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (18, 19): {'E': 1, 'W': 0, 'N': 0, 'S': 1}, (19, 19): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (20, 19): {'E': 1, 'W': 1, 'N': 0, 'S': 0}, (1, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (2, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (3, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (4, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (5, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (6, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (7, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (8, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (9, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (10, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (11, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (12, 20): {'E': 0, 'W': 1, 'N': 0, 'S': 1}, (13, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}, (14, 20): {'E': 0, 'W': 0, 'N': 0, 'S': 1}, (15, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (16, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (17, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (18, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 1}, (19, 20): {'E': 0, 'W': 0, 'N': 1, 'S': 1}, (20, 20): {'E': 0, 'W': 1, 'N': 1, 'S': 0}}","title":"Mapping of data structure"},{"location":"setup.html","text":"Maze Setup Installing and importing First in 'CMD' run the command pip install Pyamaze In your new python file enter the following code: def main(): # A test print to make sure the program is running as expected print(\"test\") from pyamaze import maze, COLOR, agent, textLabel if __name__ == '__main__': main() Creating a maze Paste the following code into the main method to generate a 5 x 5 maze. m = maze(5, 5) m.CreateMaze(loopPercent=100, theme=COLOR.dark) a = agent(m, shape='arrow', footprints=True) Adding Labels # labels l1 = textLabel(m, 'Total Cells', m.rows*m.cols) Traverse the maze Paste the following code into the main method to have the agent traverse our maze and then hit 'run'. m.tracePath({a: m.path}, delay=100, kill=True, showMarked=True) m.run() print(f'Maze Map ({m.maze_map}') Output A UI should have popped up like the screenshot below. The console should have also logged something similar to this. The successfully traveresed map","title":"Setup"},{"location":"setup.html#maze-setup","text":"","title":"Maze Setup"},{"location":"setup.html#installing-and-importing","text":"First in 'CMD' run the command pip install Pyamaze In your new python file enter the following code: def main(): # A test print to make sure the program is running as expected print(\"test\") from pyamaze import maze, COLOR, agent, textLabel if __name__ == '__main__': main()","title":"Installing and importing"},{"location":"setup.html#creating-a-maze","text":"Paste the following code into the main method to generate a 5 x 5 maze. m = maze(5, 5) m.CreateMaze(loopPercent=100, theme=COLOR.dark) a = agent(m, shape='arrow', footprints=True)","title":"Creating a maze"},{"location":"setup.html#adding-labels","text":"# labels l1 = textLabel(m, 'Total Cells', m.rows*m.cols)","title":"Adding Labels"},{"location":"setup.html#traverse-the-maze","text":"Paste the following code into the main method to have the agent traverse our maze and then hit 'run'. m.tracePath({a: m.path}, delay=100, kill=True, showMarked=True) m.run() print(f'Maze Map ({m.maze_map}')","title":"Traverse the maze"},{"location":"setup.html#output","text":"A UI should have popped up like the screenshot below. The console should have also logged something similar to this. The successfully traveresed map","title":"Output"},{"location":"testing.html","text":"Unittesting If you want to test whether or not the agent(path follower) is in the correct start location, end location refer to below. Setup In our old code add the following import unittest class TestPositionsMaze(unittest.TestCase): def test_startPos(self): self.assertEqual(\"xe\", \"xe\") Start Test Next add the following to the start test def test_startPos(self): from pyamaze import maze, agent \"\"\"This test will ensure that the maze obj has started where it was expected to and compares the start variable with the start position of the object.\"\"\" Maze = maze(20, 20) Maze.CreateMaze(loopPercent=50) a = agent(Maze, footprints=True, shape='arrow') path = wallMover(Maze) Maze.tracePath({a: path}) Maze.run() print(Maze.maze_map) End Test For testing the end position add the following to the end test def test_endPos(self): from pyamaze import maze, agent \"\"\"This test like before however will now test for the end position of the maze and see if the obj has successfully traversed the maze. It will then return the end position of the maze and the maze obj.\"\"\" Maze = maze(20, 20) end = (1, 1) Maze.CreateMaze(saveMaze=True) path = wallMover(Maze) a = agent(Maze, footprints=True, shape='arrow') Maze.tracePath({a: path}, delay=100, showMarked=True, kill=False) Maze.run() self.assertEqual(a.position, end) print(Maze.path) print('end ' f'{end}', 'position' f'{a.position}') # Test maze Output If the tests were successfull you should see the following result(s)","title":"Unittests"},{"location":"testing.html#unittesting","text":"If you want to test whether or not the agent(path follower) is in the correct start location, end location refer to below.","title":"Unittesting"},{"location":"testing.html#setup","text":"In our old code add the following import unittest class TestPositionsMaze(unittest.TestCase): def test_startPos(self): self.assertEqual(\"xe\", \"xe\")","title":"Setup"},{"location":"testing.html#start-test","text":"Next add the following to the start test def test_startPos(self): from pyamaze import maze, agent \"\"\"This test will ensure that the maze obj has started where it was expected to and compares the start variable with the start position of the object.\"\"\" Maze = maze(20, 20) Maze.CreateMaze(loopPercent=50) a = agent(Maze, footprints=True, shape='arrow') path = wallMover(Maze) Maze.tracePath({a: path}) Maze.run() print(Maze.maze_map)","title":"Start Test"},{"location":"testing.html#end-test","text":"For testing the end position add the following to the end test def test_endPos(self): from pyamaze import maze, agent \"\"\"This test like before however will now test for the end position of the maze and see if the obj has successfully traversed the maze. It will then return the end position of the maze and the maze obj.\"\"\" Maze = maze(20, 20) end = (1, 1) Maze.CreateMaze(saveMaze=True) path = wallMover(Maze) a = agent(Maze, footprints=True, shape='arrow') Maze.tracePath({a: path}, delay=100, showMarked=True, kill=False) Maze.run() self.assertEqual(a.position, end) print(Maze.path) print('end ' f'{end}', 'position' f'{a.position}') # Test maze","title":"End Test"},{"location":"testing.html#output","text":"If the tests were successfull you should see the following result(s)","title":"Output"}]}