{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Pymaze Documentation By N.M. How to install Pyamaze? pip install Pyamaze Extra content Further Pyamaze documentation and content is held at: https://pypi.org/project/pyamaze/ https://github.com/MAN1986/pyamaze https://www.youtube.com/watch?v=sTRK9mQgYuc&ab_channel=LearningOrbis Doco details This documentation will explore examples of the Pyamaze addon for Python and will explain how I've set it up for my project. Covered How to setup a Pyamaze maze WallFollowing algorithm (DFS) Loading a pre-made map for a maze Saving a map for a maze Extra content","title":"Home"},{"location":"index.html#pymaze-documentation","text":"","title":"Pymaze Documentation"},{"location":"index.html#by-nm","text":"How to install Pyamaze? pip install Pyamaze","title":"By N.M."},{"location":"index.html#extra-content","text":"Further Pyamaze documentation and content is held at: https://pypi.org/project/pyamaze/ https://github.com/MAN1986/pyamaze https://www.youtube.com/watch?v=sTRK9mQgYuc&ab_channel=LearningOrbis","title":"Extra content"},{"location":"index.html#doco-details","text":"This documentation will explore examples of the Pyamaze addon for Python and will explain how I've set it up for my project.","title":"Doco details"},{"location":"index.html#covered","text":"How to setup a Pyamaze maze WallFollowing algorithm (DFS) Loading a pre-made map for a maze Saving a map for a maze Extra content","title":"Covered"},{"location":"about.html","text":"About Section What is Pyamaze? Pyamaze is 'a module to generate Mazes and Navigate the path.' Who created Pyamaze? Pyamaze was creating by Muhammad Ahsan Naeem on GitHub on Oct 7, 2021 Documentation This documentation has been created by Nathaniel Mayers to demonstrate use of the Pyamaze module and to highlight its features.","title":"About"},{"location":"about.html#about-section","text":"What is Pyamaze? Pyamaze is 'a module to generate Mazes and Navigate the path.' Who created Pyamaze? Pyamaze was creating by Muhammad Ahsan Naeem on GitHub on Oct 7, 2021 Documentation This documentation has been created by Nathaniel Mayers to demonstrate use of the Pyamaze module and to highlight its features.","title":"About Section"},{"location":"algorithmDFS.html","text":"Maze Setup Depth First Search Algorithm In a new python file add the following: from pyamaze import maze, agent, COLOR def DFS(m): # define variables start = (m.rows, m.cols) explored = [start] frontier = [start] dfsPath = {} if __name__ == '__main__': m.run() Once the variables are setup, let's add a check if we've reached the finish line or not: if start is None: start = (m.rows, m.cols) # found finish line while len(frontier) > 0: currentCell = frontier.pop() if currentCell == (1, 1): # end cell/block break The code below will give the agent a set of directions to follow 'first' as its preferred pathway and then traverse those directions (if possible). Example 'ESNW' or 'WNSE'. for direction in 'WNSE': if m.maze_map[currentCell][direction]: if direction == 'E': childCell = (currentCell[0], currentCell[1] + 1) elif direction == 'W': childCell = (currentCell[0], currentCell[1] - 1) elif direction == 'S': childCell = (currentCell[0] + 1, currentCell[1]) elif direction == 'N': childCell = (currentCell[0] - 1, currentCell[1]) if childCell in explored: continue explored.append(childCell) frontier.append(childCell) dfsPath[childCell] = currentCell Creating a dictionary to map the agent pathway through the map. fwdPath = {} cell = (1, 1) while cell != start: fwdPath[dfsPath[cell]] = cell cell = dfsPath[cell] return fwdPath below the line if __name__ == '__main__': Insert the following code to create the maze and agent(s) m = maze(20, 20) m.CreateMaze(saveMaze=True) # save the maze as a .csv file path = DFS(m) a = agent(m, footprints=True) m.tracePath({a: path}, delay=100, showMarked=True, kill=True) m.run() Loading Maps Adding the following modifications will allow you to run a map made in the editor or to load a premade map from a csv file. if __name__ == '__main__': # run a standard 20, 20 maze or run the maze in the file loadMaze = False if not loadMaze: m = maze(20, 20) m.CreateMaze(saveMaze=True) path = DFS(m) a = agent(m, footprints=True) m.tracePath({a: path}, delay=100, showMarked=True, kill=True) m.run() if loadMaze: m = maze() m.CreateMaze(loadMaze='maze.csv') path = DFS(m) a = agent(m, footprints=True) m.tracePath({a: path}, delay=100, showMarked=True, kill=True) m.run() Output Below is different examples of direction choices and the results using: for direction in 'ESNW': using: for direction in 'WNSE': Note: the direction only REALLY applies to having 'loopPercent=val'.","title":"DFS"},{"location":"algorithmDFS.html#maze-setup","text":"","title":"Maze Setup"},{"location":"algorithmDFS.html#depth-first-search-algorithm","text":"In a new python file add the following: from pyamaze import maze, agent, COLOR def DFS(m): # define variables start = (m.rows, m.cols) explored = [start] frontier = [start] dfsPath = {} if __name__ == '__main__': m.run() Once the variables are setup, let's add a check if we've reached the finish line or not: if start is None: start = (m.rows, m.cols) # found finish line while len(frontier) > 0: currentCell = frontier.pop() if currentCell == (1, 1): # end cell/block break The code below will give the agent a set of directions to follow 'first' as its preferred pathway and then traverse those directions (if possible). Example 'ESNW' or 'WNSE'. for direction in 'WNSE': if m.maze_map[currentCell][direction]: if direction == 'E': childCell = (currentCell[0], currentCell[1] + 1) elif direction == 'W': childCell = (currentCell[0], currentCell[1] - 1) elif direction == 'S': childCell = (currentCell[0] + 1, currentCell[1]) elif direction == 'N': childCell = (currentCell[0] - 1, currentCell[1]) if childCell in explored: continue explored.append(childCell) frontier.append(childCell) dfsPath[childCell] = currentCell Creating a dictionary to map the agent pathway through the map. fwdPath = {} cell = (1, 1) while cell != start: fwdPath[dfsPath[cell]] = cell cell = dfsPath[cell] return fwdPath below the line if __name__ == '__main__': Insert the following code to create the maze and agent(s) m = maze(20, 20) m.CreateMaze(saveMaze=True) # save the maze as a .csv file path = DFS(m) a = agent(m, footprints=True) m.tracePath({a: path}, delay=100, showMarked=True, kill=True) m.run()","title":"Depth First Search Algorithm"},{"location":"algorithmDFS.html#loading-maps","text":"Adding the following modifications will allow you to run a map made in the editor or to load a premade map from a csv file. if __name__ == '__main__': # run a standard 20, 20 maze or run the maze in the file loadMaze = False if not loadMaze: m = maze(20, 20) m.CreateMaze(saveMaze=True) path = DFS(m) a = agent(m, footprints=True) m.tracePath({a: path}, delay=100, showMarked=True, kill=True) m.run() if loadMaze: m = maze() m.CreateMaze(loadMaze='maze.csv') path = DFS(m) a = agent(m, footprints=True) m.tracePath({a: path}, delay=100, showMarked=True, kill=True) m.run()","title":"Loading Maps"},{"location":"algorithmDFS.html#output","text":"Below is different examples of direction choices and the results using: for direction in 'ESNW': using: for direction in 'WNSE': Note: the direction only REALLY applies to having 'loopPercent=val'.","title":"Output"},{"location":"setup.html","text":"Maze Setup Installing and importing First in 'CMD' run the command pip install Pyamaze In your new python file enter the following code: def main(): # A test print to make sure the program is running as expected print(\"test\") from pyamaze import maze, COLOR, agent, textLabel if __name__ == '__main__': main() Creating a maze Paste the following code into the main method to generate a 5 x 5 maze. m = maze(5, 5) m.CreateMaze(loopPercent=100, theme=COLOR.dark) a = agent(m, shape='arrow', footprints=True) Adding Labels # labels l1 = textLabel(m, 'Total Cells', m.rows*m.cols) Traverse the maze Paste the following code into the main method to have the agent traverse our maze and then hit 'run'. m.tracePath({a: m.path}, delay=100, kill=True, showMarked=True) m.run() print(f'Maze Map ({m.maze_map}') Output A UI should have popped up like the screenshot below. The console should have also logged something similar to this. The successfully traveresed map","title":"Setup"},{"location":"setup.html#maze-setup","text":"","title":"Maze Setup"},{"location":"setup.html#installing-and-importing","text":"First in 'CMD' run the command pip install Pyamaze In your new python file enter the following code: def main(): # A test print to make sure the program is running as expected print(\"test\") from pyamaze import maze, COLOR, agent, textLabel if __name__ == '__main__': main()","title":"Installing and importing"},{"location":"setup.html#creating-a-maze","text":"Paste the following code into the main method to generate a 5 x 5 maze. m = maze(5, 5) m.CreateMaze(loopPercent=100, theme=COLOR.dark) a = agent(m, shape='arrow', footprints=True)","title":"Creating a maze"},{"location":"setup.html#adding-labels","text":"# labels l1 = textLabel(m, 'Total Cells', m.rows*m.cols)","title":"Adding Labels"},{"location":"setup.html#traverse-the-maze","text":"Paste the following code into the main method to have the agent traverse our maze and then hit 'run'. m.tracePath({a: m.path}, delay=100, kill=True, showMarked=True) m.run() print(f'Maze Map ({m.maze_map}')","title":"Traverse the maze"},{"location":"setup.html#output","text":"A UI should have popped up like the screenshot below. The console should have also logged something similar to this. The successfully traveresed map","title":"Output"},{"location":"testing.html","text":"Unittesting If you want to test whether or not the agent(path follower) is in the correct start location, end location refer to below. Setup In our old code add the following import unittest class TestPositionsMaze(unittest.TestCase): def test_startPos(self): self.assertEqual(\"xe\", \"xe\") Start Test Next add the following to the start test m = maze(5, 5) start = (m.rows, m.cols) m.CreateMaze(saveMaze=True) path = DFS(m) a = agent(m, footprints=True) self.assertEqual(a.position, start) print('start ' f'{start}', 'position' f'{a.position}') # m.tracePath({a: path}, delay=100, showMarked=True, kill=True) # Test maze End Test For testing the end position add the following to the end test def test_endPos(self): m = maze(5, 5) end = (1, 1) m.CreateMaze(saveMaze=True) path = DFS(m) a = agent(m, footprints=True) m.tracePath({a: path}, delay=100, showMarked=True, kill=True) m.run() self.assertEqual(a.position, end) print('end ' f'{end}', 'position' f'{a.position}') # Test maze Output If the tests were successfull you should see the following result(s)","title":"Unittests"},{"location":"testing.html#unittesting","text":"If you want to test whether or not the agent(path follower) is in the correct start location, end location refer to below.","title":"Unittesting"},{"location":"testing.html#setup","text":"In our old code add the following import unittest class TestPositionsMaze(unittest.TestCase): def test_startPos(self): self.assertEqual(\"xe\", \"xe\")","title":"Setup"},{"location":"testing.html#start-test","text":"Next add the following to the start test m = maze(5, 5) start = (m.rows, m.cols) m.CreateMaze(saveMaze=True) path = DFS(m) a = agent(m, footprints=True) self.assertEqual(a.position, start) print('start ' f'{start}', 'position' f'{a.position}') # m.tracePath({a: path}, delay=100, showMarked=True, kill=True) # Test maze","title":"Start Test"},{"location":"testing.html#end-test","text":"For testing the end position add the following to the end test def test_endPos(self): m = maze(5, 5) end = (1, 1) m.CreateMaze(saveMaze=True) path = DFS(m) a = agent(m, footprints=True) m.tracePath({a: path}, delay=100, showMarked=True, kill=True) m.run() self.assertEqual(a.position, end) print('end ' f'{end}', 'position' f'{a.position}') # Test maze","title":"End Test"},{"location":"testing.html#output","text":"If the tests were successfull you should see the following result(s)","title":"Output"}]}